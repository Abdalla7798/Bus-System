/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bussystem;

import java.awt.Color;
import java.awt.Image;
import java.io.File;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;


/**
 *
 * @author hp-
 */
public class frmbus extends javax.swing.JFrame {

    /**
     * Creates new form frmbus
     */
    public frmbus() {
        initComponents();
        
        //setExtendedState(JFrame.MAXIMIZED_HORIZ);
        //setVisible(true);
        setResizable(false);
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel4 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        dd = new com.toedter.calendar.JDateChooser();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();
        jButton3 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        rd = new com.toedter.calendar.JDateChooser();
        oneway = new javax.swing.JRadioButton();
        roundtrip = new javax.swing.JRadioButton();
        jLabel7 = new javax.swing.JLabel();
        triptype = new javax.swing.JComboBox<>();
        jSeparator4 = new javax.swing.JSeparator();
        jSeparator5 = new javax.swing.JSeparator();
        from = new javax.swing.JComboBox<>();
        to = new javax.swing.JComboBox<>();

        jLabel4.setText("jLabel4");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Bus Reservation");

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("From:");

        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("To:");

        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Departure Date:");

        jButton1.setText("Exit");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Next");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Show All Bookings");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Return Date:");

        oneway.setForeground(new java.awt.Color(255, 255, 255));
        oneway.setText("One Way Trip");
        oneway.setOpaque(false);
        oneway.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onewayActionPerformed(evt);
            }
        });

        roundtrip.setForeground(new java.awt.Color(255, 255, 255));
        roundtrip.setText("Round Trip");
        roundtrip.setOpaque(false);
        roundtrip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roundtripActionPerformed(evt);
            }
        });

        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Trip Type:");

        triptype.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "type...", "Internal", "External" }));
        triptype.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                triptypeActionPerformed(evt);
            }
        });

        from.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fromActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(triptype, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(from, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton3)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(oneway)
                        .addGap(115, 115, 115)
                        .addComponent(roundtrip))
                    .addComponent(to, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(dd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7)
                            .addComponent(jLabel6)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel5)
                            .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(oneway)
                    .addComponent(roundtrip))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(triptype, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(from, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 1, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(to, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 6, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dd, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton3)
                    .addComponent(jButton2))
                .addGap(22, 22, 22))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    public static void setInternal(JComboBox c1,JComboBox c2){
          c1.removeAllItems();
          c2.removeAllItems();
          c1.addItem("select...");
          c1.addItem("Cairo");
          c1.addItem("Hurghada");
          c1.addItem("Luxor");
          c1.addItem("Aswan");
          c1.addItem("ElGouna");
          c1.addItem("Marsa Matrouh");
          
          c2.addItem("select...");
          c2.addItem("Cairo");
          c2.addItem("Hurghada");
          c2.addItem("Luxor");
          c2.addItem("Aswan");
          c2.addItem("ElGouna");
          c2.addItem("Marsa Matrouh");
        
    }
    public static void setExternal(JComboBox c1,JComboBox c2){
          c1.removeAllItems();
          c2.removeAllItems();
          c1.addItem("select...");
          c1.addItem("Egypt");
          c1.addItem("Algeria");
          c1.addItem("Libya");
          c1.addItem("Tunisia");
          c1.addItem("Sudan");
          
          c2.addItem("select...");
          c2.addItem("Egypt");
          c2.addItem("Algeria");
          c2.addItem("Libya");
          c2.addItem("Tunisia");
          c2.addItem("Sudan");
    }
    public static void Price (JComboBox c,String Price, String Price2){
        if (oneway.isSelected()){
            c.removeAllItems();
            c.addItem(Price);
        }
        else if(roundtrip.isSelected()) {
            c.removeAllItems();
            c.addItem(Price2);    
               }
    }
    public static void setPriceExternal(JComboBox c1 ,Object count1,Object count2){
        if((count1.equals("Egypt")&&count2.equals("Algeria"))||((count1.equals("Algeria")&&count2.equals("Egypt")))){
          Price(c1,"1000","400");  
        }
        else if((count1.equals("Egypt")&&count2.equals("Libya"))||((count1.equals("Libya")&&count2.equals("Egypt")))){
             Price(c1,"750","300");
        }
        else if ((count1.equals("Egypt")&&count2.equals("Tunisia"))||((count1.equals("Tunisia")&&count2.equals("Egypt")))){
             Price(c1,"1500","500");
        }
        else if ((count1.equals("Egypt")&&count2.equals("Sudan"))||((count1.equals("Sudan")&&count2.equals("Egypt")))){
             Price(c1,"500","200");
        }
        else if ((count1.equals("Algeria")&&count2.equals("Tunisia"))||((count1.equals("Tunisia")&&count2.equals("Algeria")))){
             Price(c1,"700","200");
        }
        else if ((count1.equals("Algeria")&&count2.equals("Sudan"))||((count1.equals("Sudan")&&count2.equals("Algeria")))){
             Price(c1,"750","200");
        }
        else if ((count1.equals("Algeria")&&count2.equals("Libya"))||((count1.equals("Libya")&&count2.equals("Algeria")))){
            Price(c1,"780","210");
        }
        else if ((count1.equals("Libya")&&count2.equals("Tunisia"))||((count1.equals("Tunisia")&&count2.equals("Libya")))){
             Price(c1,"700","250");
        }
        else if ((count1.equals("Libya")&&count2.equals("Sudan"))||((count1.equals("Sudan")&&count2.equals("Libya")))){
             Price(c1,"500","150");
        }
        else if ((count1.equals("Tunisia")&&count2.equals("Sudan"))||((count1.equals("Sudan")&&count2.equals("Tunisia")))){
             Price(c1,"550","200");
        }
    }
    public static void setPriceInternal(JComboBox c1 ,Object count1,Object count2){
       if((count1.equals("Cairo")&&count2.equals("Hurghada"))||((count1.equals("Hurghada")&&count2.equals("Cairo")))){
          Price(c1,"250","100");  
        }
        else if((count1.equals("Cairo")&&count2.equals("Luxor"))||((count1.equals("Luxor")&&count2.equals("Cairo")))){
             Price(c1,"200","75");
        }
        else if ((count1.equals("Cairo")&&count2.equals("Aswan"))||((count1.equals("Aswan")&&count2.equals("Cairo")))){
             Price(c1,"175","75");
        }
        else if ((count1.equals("Cairo")&&count2.equals("ElGouna"))||((count1.equals("ElGouna")&&count2.equals("Cairo")))){
             Price(c1,"220","80");
        }
        else if ((count1.equals("Cairo")&&count2.equals("Marsa Matrouh"))||((count1.equals("Marsa Matrouh")&&count2.equals("Cairo")))){
             Price(c1,"230","90");
        }
        else if ((count1.equals("Hurghada")&&count2.equals("Luxor"))||((count1.equals("Luxor")&&count2.equals("Hurghada")))){
             Price(c1,"180","70");
        }
        else if ((count1.equals("Hurghada")&&count2.equals("Aswan"))||((count1.equals("Aswan")&&count2.equals("Hurghada")))){
            Price(c1,"190","80");
        }
        else if ((count1.equals("Hurghada")&&count2.equals("ElGouna"))||((count1.equals("ElGouna")&&count2.equals("Hurghada")))){
             Price(c1,"190","80");
        }
        else if ((count1.equals("Hurghada")&&count2.equals("Marsa Matrouh"))||((count1.equals("Marsa Matrouh")&&count2.equals("Hurghada")))){
             Price(c1,"210","95");
        }
        else if ((count1.equals("Luxor")&&count2.equals("Aswan"))||((count1.equals("Aswan")&&count2.equals("Luxor")))){
             Price(c1,"150","50");
        }
        else if ((count1.equals("Luxor")&&count2.equals("ElGouna"))||((count1.equals("ElGouna")&&count2.equals("Luxor")))){
             Price(c1,"170","60");
        }
        else if ((count1.equals("Luxor")&&count2.equals("Marsa Matrouh"))||((count1.equals("Marsa Matrouh")&&count2.equals("Luxor")))){
             Price(c1,"160","70");
        }
        else if ((count1.equals("Aswan")&&count2.equals("ElGouna"))||((count1.equals("ElGouna")&&count2.equals("Aswan")))){
             Price(c1,"180","60");
        }
        else if ((count1.equals("Aswan")&&count2.equals("ElGouna"))||((count1.equals("ElGouna")&&count2.equals("Aswan")))){
             Price(c1,"180","60");
        }
         else if ((count1.equals("Aswan")&&count2.equals("Marsa Matrouh"))||((count1.equals("Marsa Matrouh")&&count2.equals("Aswan")))){
             Price(c1,"180","60");
        }
         else if ((count1.equals("ElGouna")&&count2.equals("Marsa Matrouh"))||((count1.equals("Marsa Matrouh")&&count2.equals("ElGouna")))){
             Price(c1,"220","90");
        } 
    }
    public static void RemoveSeat(String time,String vehicle,String seat, File folder){
            File[] listOfFiles = folder.listFiles();
            
        for (File file1 : listOfFiles) {
                             if (file1.isFile()) {
                                try {
                           if(file1.getName().equals(time+vehicle+".txt")){
                           List<String> fileContent1 = new ArrayList<>(Files.readAllLines(file1.toPath(), StandardCharsets.UTF_8));  
                           fileContent1.remove(seat);
                           Collections.sort(fileContent1, new Comparator<String>() {
                           public int compare(String o1, String o2) {
                            return extractInt(o1) - extractInt(o2);
                            }
                            int extractInt(String s) {
                            String num = s.replaceAll("\\D", "");
                            return num.isEmpty() ? 0 : Integer.parseInt(num);
                            }
                            });
                           Files.write(file1.toPath(), fileContent1, StandardCharsets.UTF_8); 
                             }
                           } catch (Exception ex) {
                            Logger.getLogger(frmdriver.class.getName()).log(Level.SEVERE, null, ex);
                           }
                             }
                         }
    }
    public static void AddSeat(String time,String vehicle,String seat, File folder){
        File[] listOfFiles = folder.listFiles();
        for (File file1 : listOfFiles) {
                             if (file1.isFile()) {
                                try {
                           if(file1.getName().equals(time+vehicle+".txt")){
                           List<String> fileContent1 = new ArrayList<>(Files.readAllLines(file1.toPath(), StandardCharsets.UTF_8));
                           if(!fileContent1.contains(seat)){
                              fileContent1.add(seat);
                             }
                           Collections.sort(fileContent1, new Comparator<String>() {
                           public int compare(String o1, String o2) {
                            return extractInt(o1) - extractInt(o2);
                            }
                            int extractInt(String s) {
                            String num = s.replaceAll("\\D", "");
                            return num.isEmpty() ? 0 : Integer.parseInt(num);
                            }
                            });
                           Files.write(file1.toPath(), fileContent1, StandardCharsets.UTF_8); 
                             }
                           } catch (Exception ex) {
                            Logger.getLogger(frmdriver.class.getName()).log(Level.SEVERE, null, ex);
                           }
                             }
                         }
    }
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        if((!oneway.isSelected()&&!roundtrip.isSelected())||triptype.getSelectedItem()=="type..."||from.getSelectedItem()=="select..."||to.getSelectedItem()=="select..."||dd.getDate()==null||(rd.isEnabled()&&rd.getDate()==null)){
            
            
              JOptionPane.showMessageDialog(null, "The information is not Completed....");  
        }
        
        else
        {
             Date t = new Date();
             SimpleDateFormat k =new SimpleDateFormat("dd-MM-yy");
             
            if (rd.isEnabled()&&(dd.getDate().after(rd.getDate()))||dd.getDate().before(t)||(dd.getDate().before(t)&&!k.format(dd.getDate()).equals(k.format(t)))){
                JOptionPane.showMessageDialog(null, "Error in Selected Dates....");
            }
            else if(from.getSelectedItem().equals(to.getSelectedItem())) {
                JOptionPane.showMessageDialog(null, "Error in Selected Source and Destination....");
            }
            else{
            File folder = new File("GoingSeats");
            File folder1 = new File("ReturnSeats");
            File folder2 = new File("Booking");
            File[] listOfFiles2 = folder2.listFiles();
            frmbusInfo f=new frmbusInfo();
            frmreturn f1= new frmreturn();
        if(oneway.isSelected()){
         
        if(triptype.getSelectedItem().equals("Internal")){
        setPriceInternal(frmbusInfo.goingprice,from.getSelectedItem(),to.getSelectedItem());
        }
        else if (triptype.getSelectedItem().equals("External")){
         setPriceExternal(frmbusInfo.goingprice,from.getSelectedItem(),to.getSelectedItem());   
        }
        if(folder2.list().length==0){
            
        }
        else{
        for (File file : listOfFiles2) {
           if (file.isFile()) {
               try {
                     List<String> fileContent = new ArrayList<>(Files.readAllLines(file.toPath(), StandardCharsets.UTF_8));
                     SimpleDateFormat s= new SimpleDateFormat("dd-MM-yy");
                     String Dedate =s.format(dd.getDate());
                     if (from.getSelectedItem().equals(fileContent.get(2))&&to.getSelectedItem().equals(fileContent.get(3))&&Dedate.equals(fileContent.get(4))){
                         RemoveSeat(fileContent.get(8),fileContent.get(6),fileContent.get(9), folder);
                     }
                     else{
                         AddSeat(fileContent.get(8),fileContent.get(6),fileContent.get(9), folder);
                  }
               } catch (Exception ex) {
                   Logger.getLogger(frmdriver.class.getName()).log(Level.SEVERE, null, ex);
                   }
                 }
             }
          }
        f.setVisible(true);
        f.setLocationRelativeTo(null);
        }
        else if(roundtrip.isSelected()){
        
        frmbusInfo.lbltriptype.setText("Going Trip");
        if(triptype.getSelectedItem().equals("Internal")){
        setPriceInternal(frmbusInfo.goingprice,from.getSelectedItem(),to.getSelectedItem());
        }
        else if (triptype.getSelectedItem().equals("External")){
         setPriceExternal(frmbusInfo.goingprice,from.getSelectedItem(),to.getSelectedItem());   
        }
        if(folder2.list().length==0){
            
        }
        else{
        for (File file : listOfFiles2) {
           if (file.isFile()) {
               try {
                     List<String> fileContent = new ArrayList<>(Files.readAllLines(file.toPath(), StandardCharsets.UTF_8));
                     SimpleDateFormat s1= new SimpleDateFormat("dd-MM-yy");
                     String Dedate =s1.format(dd.getDate());
                     String Redate= s1.format(rd.getDate());
                     if (from.getSelectedItem().equals(fileContent.get(2))&&to.getSelectedItem().equals(fileContent.get(3))&&Dedate.equals(fileContent.get(4))&&Redate.equals(fileContent.get(5))){
                         RemoveSeat(fileContent.get(8),fileContent.get(6),fileContent.get(9), folder);
                         RemoveSeat(fileContent.get(19),fileContent.get(18),fileContent.get(20), folder1);
                     }
                     else if(from.getSelectedItem().equals(fileContent.get(2))&&to.getSelectedItem().equals(fileContent.get(3))&&Dedate.equals(fileContent.get(4))){
                         RemoveSeat(fileContent.get(8),fileContent.get(6),fileContent.get(9), folder);
                     }
                     else{
                         AddSeat(fileContent.get(8),fileContent.get(6),fileContent.get(9), folder);
                         AddSeat(fileContent.get(19),fileContent.get(18),fileContent.get(20), folder1);
                     }
                     if (from.getSelectedItem().equals(fileContent.get(2))&&to.getSelectedItem().equals(fileContent.get(3))&&Redate.equals(fileContent.get(5))){
                         RemoveSeat(fileContent.get(19), fileContent.get(18), fileContent.get(20), folder1);
                     }
                     else {
                         AddSeat(fileContent.get(19),fileContent.get(18),fileContent.get(20), folder1);
                     }
               } catch (Exception ex) {
                   Logger.getLogger(frmdriver.class.getName()).log(Level.SEVERE, null, ex);
                   }
                 }
             }
          }
        f.setVisible(true);
        f.setLocationRelativeTo(null);  
        }
        
      }
    } 
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        this.dispose();
        frmbooks f =new frmbooks();
        f.setVisible(true);
        f.setLocationRelativeTo(null);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void roundtripActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roundtripActionPerformed
        // TODO add your handling code here:
        oneway.setSelected(false);
        rd.setEnabled(true);
    }//GEN-LAST:event_roundtripActionPerformed

    private void onewayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onewayActionPerformed
        // TODO add your handling code here:
        roundtrip.setSelected(false);
        rd.setEnabled(false);    
    }//GEN-LAST:event_onewayActionPerformed

    private void triptypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_triptypeActionPerformed
        // TODO add your handling code here:
        if (triptype.getSelectedItem().equals("Internal")){
            setInternal(from, to);
        }
        else if (triptype.getSelectedItem().equals("External")){
            setExternal(from, to);
        }
        else {
            from.removeAllItems();
            to.removeAllItems();
        }
        

    }//GEN-LAST:event_triptypeActionPerformed

    private void fromActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fromActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_fromActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        Color c =new Color(0,0,150);
        this.getContentPane().setBackground(c);
        try {
            
            Image img =ImageIO.read(getClass().getResource("bus.png"));
            this.setIconImage(img);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
    }//GEN-LAST:event_formWindowOpened

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmbus.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmbus.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmbus.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmbus.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmbus().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static com.toedter.calendar.JDateChooser dd;
    public static javax.swing.JComboBox<String> from;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    public static javax.swing.JRadioButton oneway;
    public static com.toedter.calendar.JDateChooser rd;
    public static javax.swing.JRadioButton roundtrip;
    public static javax.swing.JComboBox<String> to;
    public static javax.swing.JComboBox<String> triptype;
    // End of variables declaration//GEN-END:variables
}
